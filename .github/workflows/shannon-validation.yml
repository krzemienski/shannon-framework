name: Shannon v2.1 - Production Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate:
    name: Comprehensive Validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout Shannon Framework
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install core dependencies
      run: |
        python -m pip install --upgrade pip
        pip install asyncio dataclasses-json pathlib

    - name: Install optional dependencies
      continue-on-error: true
      run: |
        pip install lz4 zstandard

    - name: Validate directory structure
      run: |
        echo "Checking Shannon v2.1 structure..."
        test -d src || exit 1
        test -d src/core || exit 1
        test -d src/memory || exit 1
        test -d examples || exit 1
        test -d tests || exit 1
        echo "✅ Directory structure valid"

    - name: Validate source code
      run: |
        echo "Scanning for production blockers..."
        TODO_COUNT=$(grep -r "TODO" --include="*.py" src | wc -l || echo "0")
        MOCK_COUNT=$(grep -r "NotImplementedError" --include="*.py" src | wc -l || echo "0")

        echo "TODO comments: $TODO_COUNT"
        echo "Mock implementations: $MOCK_COUNT"

        if [ "$TODO_COUNT" -gt 0 ] || [ "$MOCK_COUNT" -gt 0 ]; then
          echo "❌ Production blockers found"
          exit 1
        fi
        echo "✅ No production blockers"

    - name: Test core imports
      run: |
        cd src
        python -c "from core.orchestrator import WaveOrchestrator; print('✅ WaveOrchestrator imported')"
        python -c "from core.agent import BaseAgent; print('✅ BaseAgent imported')"
        python -c "from core.wave_config import WaveConfig; print('✅ WaveConfig imported')"
        python -c "from memory.tier_manager import MemoryTierManager; print('✅ MemoryTierManager imported')"
        python -c "from memory.context_monitor import ContextMonitor; print('✅ ContextMonitor imported')"

    - name: Run comprehensive test suite
      run: |
        python tests/run_all_tests.py
        echo "✅ All tests passed"

    - name: Validate examples
      run: |
        echo "Testing example 01: Basic Orchestration"
        python examples/01_basic_orchestration.py
        echo "✅ Example executed successfully"

    - name: Generate validation report
      run: |
        echo "Shannon Framework v2.1 - CI Validation"
        echo "========================================"
        echo "Python: ${{ matrix.python-version }}"
        echo "Date: $(date)"
        echo "Status: ✅ PASSED"
        echo ""
        echo "Metrics:"
        echo "- Source files: $(find src -name '*.py' | wc -l)"
        echo "- Total lines: $(find src -name '*.py' -exec wc -l {} + | tail -1)"
        echo "- Classes: $(grep -r 'class ' --include='*.py' src | wc -l)"
        echo "- TODO count: 0"
        echo "- Mock count: 0"

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-py${{ matrix.python-version }}
        path: |
          tests/test_results.json
          tests/test_results.html
        retention-days: 30

    - name: Upload validation report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: validation-report
        path: tests/VALIDATION_REPORT.md
        retention-days: 90

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: validate

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Production readiness check
      run: |
        echo "Running production readiness checks..."

        # Check for required files
        test -f tests/VALIDATION_REPORT.md || exit 1
        test -f tests/run_all_tests.py || exit 1
        test -f README.md || exit 1

        # Check documentation completeness
        DOC_COUNT=$(find . -name "*.md" -type f | wc -l)
        if [ "$DOC_COUNT" -lt 15 ]; then
          echo "❌ Insufficient documentation: $DOC_COUNT files"
          exit 1
        fi

        echo "✅ All quality gates passed"
        echo "Documentation files: $DOC_COUNT"

    - name: Final certification
      run: |
        echo "================================"
        echo "Shannon v2.1 - CERTIFICATION"
        echo "================================"
        echo "Status: ✅ PRODUCTION READY"
        echo "Validation: PASSED"
        echo "Quality Gates: PASSED"
        echo "Authorization: DEPLOY"
        echo "================================"

  deploy-readiness:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [validate, quality-gates]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Validate Docker configuration
      run: |
        test -f Dockerfile || exit 1
        test -f docker-compose.yml || exit 1
        echo "✅ Docker configuration valid"

    - name: Validate Kubernetes manifests
      run: |
        test -f k8s/namespace.yaml || exit 1
        test -f k8s/shannon-deployment.yaml || exit 1
        echo "✅ Kubernetes manifests valid"

    - name: Deployment authorization
      run: |
        echo "╔════════════════════════════════════════╗"
        echo "║  SHANNON FRAMEWORK v2.1                ║"
        echo "║  DEPLOYMENT AUTHORIZATION              ║"
        echo "╚════════════════════════════════════════╝"
        echo ""
        echo "✅ All validation tests passed"
        echo "✅ Quality gates satisfied"
        echo "✅ Production readiness confirmed"
        echo ""
        echo "STATUS: AUTHORIZED FOR PRODUCTION"
        echo "DATE: $(date)"